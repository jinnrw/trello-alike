{"version":3,"sources":["components/Header.js","components/BoardHeader.js","styled-components/TextArea.js","styled-components/Buttons.js","components/CardItems.js","components/CardComposer.js","components/CardLists.js","components/BoardCanvas.js","App.js","serviceWorker.js","index.js"],"names":["Header","styled","className","src","alt","BoardHeader","useState","res","useEffect","fetch","then","json","list","console","log","TextArea","textarea","Button","button","ButtonClose","span","StyledCardItems","div","CardItems","props","isEditingCard","setIsEditingCard","currentEditingIndex","setCurrentEditingIndex","cardItems","newCardItems","setNewCardItems","quickEditorTextarea","current","focus","value","title","useRef","onkeydownTextArea","e","index","keyCode","saveEditor","preventDefault","prev","singleCardItem","item","key","onClick","editCardTitle","quickEditor","ref","onChange","target","updateCardItem","onKeyDown","map","StyledCardComposer","CardComposer","textareaRef","closeComposer","setIsComposing","addNewCard","newCard","completed","newcardItems","setCardItems","placeholder","StyledCardLists","CardLists","list_title","cardsData","list_items","isComposing","responseData","StyledBoardCanvas","BoardCanvas","renderLists","id","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8c81d46d.chunk.js","sourcesContent":["import React from 'react';\nimport styled from \"styled-components\";\n\n// The styled method works perfectly on all of your own or any third-party component, as long as they attach the passed className prop to a DOM element.\nconst HeaderDiv = ({className}) => {\n    return (\n        <header className={className}>\n            <div>\n                <img src=\"https://avatars0.githubusercontent.com/u/17697287?s=460&v=4\" alt=\"\" className=\"logo\" />\n            </div>\n        </header>\n    )\n}\n\nconst Header = styled(HeaderDiv)`\n    display: flex;\n    justify-content: center;\n    height: 32px;\n    min-height: 40px;\n    padding: 4px;\n    background: rgba(0,0,0,.15);\n\n    .logo {\n        height: 100%;\n    }\n`\n\nexport default Header;","import React, {useState, useEffect} from 'react';\nimport styled from \"styled-components\";\n\n// The styled method works perfectly on all of your own or any third-party component, as long as they attach the passed className prop to a DOM element.\nconst BoardHeaderDiv = ({ className }) => {\n    const [res, setRes] = useState();\n\n    // componentDidmount\n    useEffect(() => {\n        fetch('/')\n            .then(res => res.json())\n            .then(list => {\n                // setRes(data);\n                console.log(list);\n            })\n    })\n\n    return (\n        <div className={className}>\n            <div>\n                <span className=\"board-title\">{res}</span>\n            </div>\n        </div>\n    )\n}\n\nconst BoardHeader = styled(BoardHeaderDiv)`\n    display: flex;\n    padding: 8px 4px 4px 8px;\n\n    .board-title {\n        color: #fff;\n        font-size: 18px;\n        font-weight: 700;\n        line-height: 32px;\n        padding: 0 12px;\n    }\n`\n\nexport default BoardHeader;","import styled from \"styled-components\";\n\nconst TextArea = styled.textarea`\n    color: #172b4d;\n    box-sizing: border-box;\n    -webkit-appearance: none;\n    border-radius: 3px;\n    display: block;\n    line-height: 20px;\n    overflow: hidden;\n    overflow-wrap: break-word;\n    resize: none;\n    height: 90px;\n    padding: 6px 8px;\n    margin: 0 0 4px;\n    width: 100%;\n    border: none;\n`\n\nexport default TextArea;","import styled from \"styled-components\";\n\nconst Button = styled.button`\n    display: inline-block;\n    font-weight: 400;\n    line-height: 20px;\n    margin: 0;\n    padding: 6px 12px;\n    text-align: center;\n    background-color: #5aac44;\n    box-shadow: none;\n    border: none;\n    color: #fff;\n    -webkit-appearance: none;\n    border-radius: 3px;\n    cursor: pointer;\n\n    &:hover {\n        background-color: #61bd4f;\n    }\n`\n\nconst ButtonClose = styled.span`\n    width: 32px;\n    height: 32px;\n    font-size: 18px;\n    line-height: 32px;\n    color: #6b778c;\n    text-align: center;\n    cursor: pointer;\n`\n\nexport {Button, ButtonClose};","import React, { useRef, useState, useEffect } from 'react';\nimport styled from \"styled-components\";\nimport TextArea from \"../styled-components/TextArea\"\nimport { Button } from \"../styled-components/Buttons\"\n\nconst CardItems = (props) => {\n    // init states\n    const [isEditingCard, setIsEditingCard] = useState(false);\n    const [currentEditingIndex, setCurrentEditingIndex] = useState(null);\n    const [newCardItems, setNewCardItems] = useState([...props.cardItems]);\n\n    useEffect(() => {\n        if (isEditingCard && !(currentEditingIndex === null)) {\n            quickEditorTextarea.current.focus();\n            quickEditorTextarea.current.value = props.cardItems[currentEditingIndex].title;\n        }\n    }, [currentEditingIndex])\n\n    let quickEditorTextarea = useRef();\n\n    function editCardTitle(index) {\n        if (!isEditingCard) {\n            setIsEditingCard(true);\n            setCurrentEditingIndex(index);\n        }\n    }\n\n    function updateCardItem(e) {\n        quickEditorTextarea.current.value = e.target.value;\n    }\n\n    function onkeydownTextArea(e, index) {\n        if (e.keyCode === 13) {\n            saveEditor();\n            e.preventDefault();\n        } else if (e.keyCode === 27) { // Escape key\n            cancelEditor();\n            e.preventDefault();\n        }\n\n    }\n\n    function saveEditor() {\n        newCardItems[currentEditingIndex].title = quickEditorTextarea.current.value\n        setNewCardItems(newCardItems);\n        setIsEditingCard(false);\n        setCurrentEditingIndex(null);\n    }\n\n    function cancelEditor() {\n        // return previous state\n        setNewCardItems(prev => prev);\n        setIsEditingCard(false);\n        setCurrentEditingIndex(null);\n    }\n\n    const singleCardItem = (item, index) =>\n        (<div className=\"list-card\" key={index} >\n            <div className=\"list-card-detail\">\n                <div>{item.title}</div>\n                <div className=\"edit-card\"\n                    onClick={() => {\n                        editCardTitle(index);\n                    }}>\n                </div>\n            </div>\n        </div >)\n\n    const quickEditor = (index) =>\n        (<div className=\"quick-card-editor\" key={index}>\n            <TextArea\n                ref={quickEditorTextarea}\n                onChange={(e) => {\n                    updateCardItem(e);\n                }}\n                onKeyDown={(e) => {\n                    onkeydownTextArea(e)\n                }} />\n            <Button onClick={() => { saveEditor() }}>Save</Button>\n        </div>)\n\n\n    // Return all card items\n    const cardItems = props.cardItems.map((item, index) =>\n        (isEditingCard ?\n            (index === currentEditingIndex ?\n                quickEditor(index) :\n                singleCardItem(item, index)\n            )\n            : singleCardItem(item, index)\n        )\n    )\n\n    return (\n        <StyledCardItems>\n            {cardItems}\n        </StyledCardItems>\n    )\n}\n\nconst StyledCardItems = styled.div`\n    flex: 1 1 auto;\n    margin-bottom: 0;\n    overflow-y: auto;\n    overflow-x: hidden;\n    padding: 0 4px;\n    z-index: 1;\n    min-height: 0;\n\n    .list-card {\n        background-color: #fff;\n        border-radius: 3px;\n        box-shadow: 0 1px 0 rgba(9,30,66,.25);\n        cursor: pointer;\n        display: block;\n        margin-bottom: 8px;\n        max-width: 300px;\n        min-height: 20px;\n        position: relative;\n        text-decoration: none;\n        z-index: 0;\n\n        &:hover {\n            background-color: #f4f5f7;\n        }\n\n        &:hover .edit-card {\n            display: block;\n        }\n    }\n\n    .list-card-detail {\n        display: flex;\n        justify-content: space-between;\n        padding: 6px 8px;\n        margin: 0 0 4px;\n        overflow: hidden;\n        text-decoration: none;\n        word-wrap: break-word;\n    }\n\n    .edit-card {\n        display: none;\n        width: 20px;\n        height: 20px;\n        background-color: #f4f5f7;\n        background-clip: padding-box;\n        background-origin: padding-box;\n        border-radius: 3px;\n        opacity: .8;\n        padding: 4px;\n        position: absolute;\n        right: 2px;\n        top: 2px;\n        background: url(./icon-pencil.svg) 50% 50% no-repeat;\n        background-size: 16px;\n\n        &:hover {\n            background-color: #ebecf0;\n            opacity: 1;\n        }\n    }\n\n    .quick-card-editor {\n        overflow: hidden;\n        overflow-wrap: break-word;\n        resize: none;\n        background: #ebecf0;\n        \n        button {\n            margin: 8px;\n        }\n    }\n\n`\n\nexport default CardItems;","import React, { useRef } from 'react';\nimport styled from \"styled-components\";\nimport { Button, ButtonClose } from \"../styled-components/Buttons\"\n\nconst CardComposer = (props) => {\n    let textareaRef = useRef();\n\n    function closeComposer() {\n        props.setIsComposing(false);\n    }\n\n    function addNewCard() {\n        if (!(textareaRef.current.value === \"\"))  {\n            let newCard = {\n                title: textareaRef.current.value,\n                completed: false\n            };\n            let newcardItems = [...props.cardItems, newCard];\n\n            props.setCardItems(newcardItems);\n            closeComposer();    \n        }\n    }\n\n    function onkeydownTextArea(e) {\n        if (e.keyCode === 13) {\n            addNewCard();\n            e.preventDefault();\n        }\n    }\n\n    return (\n        <StyledCardComposer>\n            <div className=\"list-card\">\n                <textarea \n                ref={textareaRef} \n                placeholder=\"Enter a title for this card…\"\n                onKeyDown={(e) => {onkeydownTextArea(e)}}></textarea>\n            </div>\n            <div className=\"composer-controls\">\n                <Button onClick={addNewCard}>Add Card</Button>\n                <ButtonClose onClick={closeComposer}>&#10006;</ButtonClose>\n            </div>\n\n        </StyledCardComposer>\n    )\n}\n\nconst StyledCardComposer = styled.div`\n    padding: 0 4px;\n\n\n\n    .list-card {\n        padding: 5px;\n        background-color: #fff;\n        border-radius: 3px;\n        box-shadow: 0 1px 0 rgba(9,30,66,.25);\n        cursor: pointer;\n        display: block;\n        margin-bottom: 8px;\n        max-width: 300px;\n        min-height: 20px;\n        position: relative;\n        text-decoration: none;\n        z-index: 0;\n    }\n\n    textarea {\n        width: 100%;\n        resize: none;\n        background: none;\n        border: none;\n        box-shadow: none;\n        height: auto;\n        margin-bottom: 4px;\n        max-height: 162px;\n        min-height: 54px;\n        overflow-y: auto;\n    }\n\n    .composer-controls {\n        display: flex;\n\n        > * {\n            margin-right: 6px;\n        }\n    }\n\n\n\n`\n\nexport default CardComposer;","import React, { useRef, useState } from 'react';\nimport styled from \"styled-components\";\nimport CardItems from './CardItems';\nimport CardComposer from './CardComposer';\n\nconst CardLists = (props) => {\n    let list_title = props.list_title;\n    let list_items = props.list_items;\n\n    const cardsData = list_items;\n    const [isComposing, setIsComposing] = useState(false);\n    const [cardItems, setCardItems] = useState(cardsData);\n\n    function openCardComposer() {\n        if (!isComposing) {\n            setIsComposing(true);\n        }\n    }\n\n    return (\n        <StyledCardLists>\n            <div className=\"list-wrapper\">\n                <div className=\"list-content\">\n                    <div className=\"list-header\">\n                        <div className=\"list-header-title\">{list_title}</div>\n                    </div>\n                    <CardItems\n                        cardItems={cardItems}\n                        setCardItems={setCardItems}\n                    />\n                    {\n                        isComposing ?\n                            <CardComposer\n                                isComposing={isComposing}\n                                setIsComposing={setIsComposing}\n                                cardItems={cardItems}\n                                setCardItems={setCardItems} /> :\n                            (<div className=\"card-composer-container\" onClick={openCardComposer}>\n                                <span>+ Add another card</span>\n                            </div>)\n                    }\n\n                </div>\n            </div>\n        </StyledCardLists>\n    )\n}\n\nconst StyledCardLists = styled.div`\n    .list-wrapper {\n        width: 272px;\n        margin: 0 4px;\n        height: 100%;\n        box-sizing: border-box;\n        display: inline-block;\n        vertical-align: top;\n        white-space: nowrap;\n    }\n\n    .list-content {\n        padding: 8px;\n        background-color: #ebecf0;\n        border-radius: 3px;\n        box-sizing: border-box;\n        display: flex;\n        flex-direction: column;\n        max-height: 100%;\n        position: relative;\n        white-space: normal;\n    }\n\n    .list-header {\n        flex: 0 0 auto;\n        margin-bottom: 10px;\n        padding: 0 8px;\n        position: relative;\n        min-height: 20px;\n    }\n\n    .list-header-title {\n        font-size: 14px;\n        line-height: 20px;\n        color: #172b4d;\n        font-weight: 600;\n    }\n\n    .board-title {\n        color: #fff;\n        font-size: 18px;\n        font-weight: 700;\n        line-height: 32px;\n        padding: 0 12px;\n    }\n\n    .card-composer-container {\n        color: #5e6c84;\n        border-radius: 3px;\n        flex-grow: 1;\n        margin: 5px;\n        padding: 5px 8px;\n        cursor: pointer;\n\n        &:hover {\n            background-color: rgba(9,30,66,.08);\n            color: #172b4d;\n        }\n    }\n\n`\n\nexport default CardLists;","import React from 'react';\nimport styled from \"styled-components\";\nimport CardLists from './CardLists';\nimport CardItems from './CardItems';\nimport CardComposer from './CardComposer';\n\nconst responseData = [{\n    list_title: \"To Do\",\n    list_items: [\n        {\n            title: \"do this\",\n            completed: false,\n        },\n        {\n            title: \"do that\",\n            completed: false,\n        },\n        {\n            title: \"push to github\",\n            completed: false,\n        }\n    ]\n}, {\n    list_title: \"Done\",\n    list_items: [\n        {\n            title: \"buy milk\",\n            completed: false,\n        },\n        {\n            title: \"overcooked dinner\",\n            completed: false,\n        },\n        {\n            title: \"save your code\",\n            completed: false,\n        }\n    ]\n}\n]\n\nconst BoardCanvas = () => {\n\n    let renderLists = responseData.map((list, index) => (\n        <CardLists\n            list_title={list.list_title}\n            list_items={list.list_items}\n            key={index} />\n\n    ))\n\n    return (\n        <StyledBoardCanvas id=\"board\">\n            {renderLists}\n        </StyledBoardCanvas>\n    )\n}\n\nconst StyledBoardCanvas = styled.div`\n    display: flex;\n    padding: 8px 4px 4px 8px;\n`\n\nexport default BoardCanvas;","import React from 'react';\nimport './App.css';\nimport Header from './components/Header';\nimport BoardHeader from './components/BoardHeader';\nimport BoardCanvas from './components/BoardCanvas';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <BoardHeader />\n      <BoardCanvas />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}