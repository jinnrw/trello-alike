{"version":3,"sources":["components/Header.js","components/BoardHeader.js","styled-components/TextArea.js","styled-components/Buttons.js","components/CardItems.js","components/CardComposer.js","components/CardList.js","components/AddList.js","components/BoardCanvas.js","App.js","serviceWorker.js","index.js"],"names":["Header","styled","className","src","alt","BoardHeader","useState","res","setRes","useEffect","fetch","then","json","data","title","TextArea","textarea","props","small","Button","button","ButtonClose","span","StyledCardItems","div","CardItems","cardItems","setCardItems","isEditingCard","setIsEditingCard","currentEditingIndex","setCurrentEditingIndex","textareaRef","useRef","onkeydownTextArea","e","keyCode","saveEditor","preventDefault","prev","reset","current","value","focus","singleCardItem","item","index","key","onClick","console","log","editCardTitle","quickEditor","ref","onChange","target","updateCardItem","onKeyDown","map","StyledCardComposer","CardComposer","isComposing","closeComposer","setIsComposing","addNewCard","newCard","completed","placeholder","StyledCardLists","CardList","list_title","list_items","StyledAddList","AddList","lists","setLists","isAddingList","setIsAddingList","saveAddList","newList","StyledBoardCanvas","BoardCanvas","renderLists","list","id","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a674128e.chunk.js","sourcesContent":["import React from 'react';\r\nimport styled from \"styled-components\";\r\n\r\n// The styled method works perfectly on all of your own or any third-party component, as long as they attach the passed className prop to a DOM element.\r\nconst HeaderDiv = ({className}) => {\r\n    return (\r\n        <header className={className}>\r\n            <div>\r\n                <img src=\"https://avatars0.githubusercontent.com/u/17697287?s=460&v=4\" alt=\"\" className=\"logo\" />\r\n            </div>\r\n        </header>\r\n    )\r\n}\r\n\r\nconst Header = styled(HeaderDiv)`\r\n    display: flex;\r\n    justify-content: center;\r\n    height: 32px;\r\n    min-height: 40px;\r\n    padding: 4px;\r\n    background: rgba(0,0,0,.15);\r\n\r\n    .logo {\r\n        height: 100%;\r\n    }\r\n`\r\n\r\nexport default Header;","import React, {useState, useEffect} from 'react';\r\nimport styled from \"styled-components\";\r\n\r\n// The styled method works perfectly on all of your own or any third-party component, as long as they attach the passed className prop to a DOM element.\r\nconst BoardHeaderDiv = ({ className }) => {\r\n    const [res, setRes] = useState({});\r\n\r\n    // componentDidmount, use [] as second argument\r\n    useEffect(() => {\r\n        fetch('/api')\r\n            .then(res => res.json())\r\n            .then(data => {\r\n                setRes(data);\r\n            })\r\n    }, [])\r\n\r\n    return (\r\n        <div className={className}>\r\n            <div>\r\n                <span className=\"board-title\">{res.title}</span>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst BoardHeader = styled(BoardHeaderDiv)`\r\n    display: flex;\r\n    padding: 8px 4px 4px 8px;\r\n\r\n    .board-title {\r\n        color: #fff;\r\n        font-size: 18px;\r\n        font-weight: 700;\r\n        line-height: 32px;\r\n        padding: 0 12px;\r\n    }\r\n`\r\n\r\nexport default BoardHeader;","import styled from \"styled-components\";\r\n\r\nconst TextArea = styled.textarea`\r\n    color: #172b4d;\r\n    box-sizing: border-box;\r\n    -webkit-appearance: none;\r\n    border-radius: 3px;\r\n    display: block;\r\n    line-height: 20px;\r\n    overflow: hidden;\r\n    overflow-wrap: break-word;\r\n    resize: none;\r\n    padding: 6px 8px;\r\n    margin: 0 0 4px;\r\n    width: 100%;\r\n    border: none;\r\n    height: ${props => props.small ? \"32px\" : \"90px\"};\r\n`\r\n\r\nexport default TextArea;","import styled from \"styled-components\";\r\n\r\nconst Button = styled.button`\r\n    display: inline-block;\r\n    font-weight: 400;\r\n    line-height: 20px;\r\n    margin: 0;\r\n    padding: 6px 12px;\r\n    text-align: center;\r\n    background-color: #5aac44;\r\n    box-shadow: none;\r\n    border: none;\r\n    color: #fff;\r\n    -webkit-appearance: none;\r\n    border-radius: 3px;\r\n    cursor: pointer;\r\n\r\n    &:hover {\r\n        background-color: #61bd4f;\r\n    }\r\n`\r\n\r\nconst ButtonClose = styled.span`\r\n    width: 32px;\r\n    height: 32px;\r\n    font-size: 18px;\r\n    line-height: 32px;\r\n    color: #6b778c;\r\n    text-align: center;\r\n    cursor: pointer;\r\n`\r\n\r\nexport {Button, ButtonClose};","import React, { useRef, useState, useEffect } from 'react';\r\nimport styled from \"styled-components\";\r\nimport TextArea from \"../styled-components/TextArea\"\r\nimport { Button } from \"../styled-components/Buttons\"\r\n\r\nconst CardItems = (props) => {\r\n    const cardItems = props.cardItems;\r\n    const setCardItems = props.setCardItems;\r\n    const [isEditingCard, setIsEditingCard] = useState(false);\r\n    const [currentEditingIndex, setCurrentEditingIndex] = useState(null);\r\n\r\n    let textareaRef = useRef();\r\n\r\n    useEffect(() => {\r\n        if (isEditingCard && !(currentEditingIndex === null)) {\r\n            textareaRef.current.focus();\r\n            textareaRef.current.value = cardItems[currentEditingIndex].title;\r\n        }\r\n    }, [currentEditingIndex])\r\n\r\n    function editCardTitle(index) {\r\n        if (!isEditingCard) {\r\n            console.log(cardItems);\r\n            \r\n            setIsEditingCard(true);\r\n            setCurrentEditingIndex(index);\r\n        }\r\n    }\r\n\r\n    function updateCardItem(e) {\r\n        textareaRef.current.value = e.target.value;\r\n    }\r\n\r\n    function onkeydownTextArea(e) {\r\n        if (e.keyCode === 13) {\r\n            saveEditor();\r\n            e.preventDefault();\r\n        } else if (e.keyCode === 27) { // Escape key\r\n            cancelEditor();\r\n            e.preventDefault();\r\n        }\r\n    }\r\n\r\n    function saveEditor() {\r\n        cardItems[currentEditingIndex].title = textareaRef.current.value;\r\n        setCardItems(cardItems);\r\n        reset();\r\n    }\r\n\r\n    function cancelEditor() {\r\n        // return previous state\r\n        setCardItems(prev => prev);\r\n        reset();\r\n    }\r\n\r\n    function reset() {\r\n        setIsEditingCard(false);\r\n        setCurrentEditingIndex(null);\r\n    }\r\n\r\n    const singleCardItem = (item, index) =>\r\n        (<div className=\"list-card\" key={index} >\r\n            <div className=\"list-card-detail\">\r\n                <div>{item.title}</div>\r\n                <div className=\"edit-card\"\r\n                    onClick={() => {\r\n                        editCardTitle(index);\r\n                    }}>\r\n                </div>\r\n            </div>\r\n        </div >)\r\n\r\n    const quickEditor = (index) =>\r\n        (<div className=\"quick-card-editor\" key={index}>\r\n            <TextArea\r\n                ref={textareaRef}\r\n                onChange={(e) => {\r\n                    updateCardItem(e);\r\n                }}\r\n                onKeyDown={(e) => {\r\n                    onkeydownTextArea(e);\r\n                }} />\r\n            <Button onClick={() => { saveEditor() }}>Save</Button>\r\n        </div>)\r\n\r\n    return (\r\n        <StyledCardItems>\r\n            {/* Return all card items*/}\r\n            {\r\n                cardItems.map((item, index) =>\r\n                    (isEditingCard ?\r\n                        (index === currentEditingIndex ?\r\n                            quickEditor(index) :\r\n                            singleCardItem(item, index)\r\n                        )\r\n                        : singleCardItem(item, index)\r\n                    )\r\n                )\r\n            }\r\n        </StyledCardItems>\r\n    )\r\n}\r\n\r\nconst StyledCardItems = styled.div`\r\n    flex: 1 1 auto;\r\n    margin-bottom: 0;\r\n    overflow-y: auto;\r\n    overflow-x: hidden;\r\n    padding: 0 4px;\r\n    z-index: 1;\r\n    min-height: 0;\r\n\r\n    .list-card {\r\n        background-color: #fff;\r\n        border-radius: 3px;\r\n        box-shadow: 0 1px 0 rgba(9,30,66,.25);\r\n        cursor: pointer;\r\n        display: block;\r\n        margin-bottom: 8px;\r\n        max-width: 300px;\r\n        min-height: 20px;\r\n        position: relative;\r\n        text-decoration: none;\r\n        z-index: 0;\r\n\r\n        &:hover {\r\n            background-color: #f4f5f7;\r\n        }\r\n\r\n        &:hover .edit-card {\r\n            display: block;\r\n        }\r\n    }\r\n\r\n    .list-card-detail {\r\n        display: flex;\r\n        justify-content: space-between;\r\n        padding: 6px 8px;\r\n        margin: 0 0 4px;\r\n        overflow: hidden;\r\n        text-decoration: none;\r\n        word-wrap: break-word;\r\n    }\r\n\r\n    .edit-card {\r\n        display: none;\r\n        width: 20px;\r\n        height: 20px;\r\n        background-color: #f4f5f7;\r\n        background-clip: padding-box;\r\n        background-origin: padding-box;\r\n        border-radius: 3px;\r\n        opacity: .8;\r\n        padding: 4px;\r\n        position: absolute;\r\n        right: 2px;\r\n        top: 2px;\r\n        background: url(./icon-pencil.svg) 50% 50% no-repeat;\r\n        background-size: 16px;\r\n\r\n        &:hover {\r\n            background-color: #ebecf0;\r\n            opacity: 1;\r\n        }\r\n    }\r\n\r\n    .quick-card-editor {\r\n        overflow: hidden;\r\n        overflow-wrap: break-word;\r\n        resize: none;\r\n        background: #ebecf0;\r\n        \r\n        button {\r\n            margin: 8px;\r\n        }\r\n    }\r\n\r\n`\r\n\r\nexport default CardItems;","import React, { useEffect, useRef } from 'react';\r\nimport styled from \"styled-components\";\r\nimport { Button, ButtonClose } from \"../styled-components/Buttons\"\r\n\r\nconst CardComposer = (props) => {\r\n    const cardItems = props.cardItems;\r\n    const setCardItems = props.setCardItems;\r\n    let isComposing = props.isComposing;\r\n    let textareaRef = useRef();\r\n\r\n    useEffect(() => {\r\n        if (isComposing) {\r\n            textareaRef.current.focus();\r\n        }\r\n    }, [isComposing])\r\n\r\n    function closeComposer() {\r\n        props.setIsComposing(false);\r\n    }\r\n\r\n    function addNewCard() {\r\n        if (!(textareaRef.current.value === \"\"))  {\r\n            let newCard = {\r\n                title: textareaRef.current.value,\r\n                completed: false\r\n            };\r\n\r\n            setCardItems([...cardItems, newCard]);\r\n            closeComposer();    \r\n        }\r\n    }\r\n\r\n    function onkeydownTextArea(e) {\r\n        if (e.keyCode === 13) {\r\n            addNewCard();\r\n            e.preventDefault();\r\n        } else if (e.keyCode === 27) { // Escape key\r\n            closeComposer();\r\n            e.preventDefault();\r\n        }\r\n    }\r\n\r\n    return (\r\n        <StyledCardComposer>\r\n            <div className=\"list-card\">\r\n                <textarea \r\n                ref={textareaRef} \r\n                placeholder=\"Enter a title for this card…\"\r\n                onKeyDown={(e) => {onkeydownTextArea(e)}}></textarea>\r\n            </div>\r\n            <div className=\"composer-controls\">\r\n                <Button onClick={addNewCard}>Add Card</Button>\r\n                <ButtonClose onClick={closeComposer}>&#10006;</ButtonClose>\r\n            </div>\r\n        </StyledCardComposer>\r\n    )\r\n}\r\n\r\nconst StyledCardComposer = styled.div`\r\n    padding: 0 4px;\r\n\r\n\r\n\r\n    .list-card {\r\n        padding: 5px;\r\n        background-color: #fff;\r\n        border-radius: 3px;\r\n        box-shadow: 0 1px 0 rgba(9,30,66,.25);\r\n        cursor: pointer;\r\n        display: block;\r\n        margin-bottom: 8px;\r\n        max-width: 300px;\r\n        min-height: 20px;\r\n        position: relative;\r\n        text-decoration: none;\r\n        z-index: 0;\r\n    }\r\n\r\n    textarea {\r\n        width: 100%;\r\n        resize: none;\r\n        background: none;\r\n        border: none;\r\n        box-shadow: none;\r\n        height: auto;\r\n        margin-bottom: 4px;\r\n        max-height: 162px;\r\n        min-height: 54px;\r\n        overflow-y: auto;\r\n    }\r\n\r\n    .composer-controls {\r\n        display: flex;\r\n\r\n        > * {\r\n            margin-right: 6px;\r\n        }\r\n    }\r\n\r\n\r\n\r\n`\r\n\r\nexport default CardComposer;","import React, { useRef, useState } from 'react';\r\nimport styled from \"styled-components\";\r\nimport CardItems from './CardItems';\r\nimport CardComposer from './CardComposer';\r\n\r\nconst CardList = (props) => {\r\n    let list_title = props.list_title;\r\n    let list_items = props.list_items;\r\n\r\n    const [isComposing, setIsComposing] = useState(false);\r\n    const [cardItems, setCardItems] = useState(list_items);\r\n\r\n    function openCardComposer() {\r\n        if (!isComposing) {\r\n            setIsComposing(true);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <StyledCardLists>\r\n            <div className=\"list-wrapper\">\r\n                <div className=\"list-content\">\r\n                    <div className=\"list-header\">\r\n                        <div className=\"list-header-title\">{list_title}</div>\r\n                    </div>\r\n                    <CardItems\r\n                        cardItems={cardItems}\r\n                        setCardItems={setCardItems}\r\n                    />\r\n                    {\r\n                        isComposing ?\r\n                            <CardComposer\r\n                                isComposing={isComposing}\r\n                                setIsComposing={setIsComposing}\r\n                                cardItems={cardItems}\r\n                                setCardItems={setCardItems} /> :\r\n                            (<div className=\"card-composer-container\" onClick={openCardComposer}>\r\n                                <span>+ Add another card</span>\r\n                            </div>)\r\n                    }\r\n\r\n                </div>\r\n            </div>\r\n        </StyledCardLists>\r\n    )\r\n}\r\n\r\nconst StyledCardLists = styled.div`\r\n    .list-wrapper {\r\n        width: 272px;\r\n        margin: 0 4px;\r\n        height: 100%;\r\n        box-sizing: border-box;\r\n        display: inline-block;\r\n        vertical-align: top;\r\n        white-space: nowrap;\r\n    }\r\n\r\n    .list-content {\r\n        padding: 8px;\r\n        background-color: #ebecf0;\r\n        border-radius: 3px;\r\n        box-sizing: border-box;\r\n        display: flex;\r\n        flex-direction: column;\r\n        max-height: 100%;\r\n        position: relative;\r\n        white-space: normal;\r\n    }\r\n\r\n    .list-header {\r\n        flex: 0 0 auto;\r\n        margin-bottom: 10px;\r\n        padding: 0 8px;\r\n        position: relative;\r\n        min-height: 20px;\r\n    }\r\n\r\n    .list-header-title {\r\n        font-size: 14px;\r\n        line-height: 20px;\r\n        color: #172b4d;\r\n        font-weight: 600;\r\n    }\r\n\r\n    .board-title {\r\n        color: #fff;\r\n        font-size: 18px;\r\n        font-weight: 700;\r\n        line-height: 32px;\r\n        padding: 0 12px;\r\n    }\r\n\r\n    .card-composer-container {\r\n        color: #5e6c84;\r\n        border-radius: 3px;\r\n        flex-grow: 1;\r\n        margin: 5px;\r\n        padding: 5px 8px;\r\n        cursor: pointer;\r\n\r\n        &:hover {\r\n            background-color: rgba(9,30,66,.08);\r\n            color: #172b4d;\r\n        }\r\n    }\r\n\r\n`\r\n\r\nexport default CardList;","import React, { useState, useEffect, useRef } from 'react';\r\nimport styled from \"styled-components\";\r\nimport { Button, ButtonClose } from \"../styled-components/Buttons\"\r\nimport TextArea from \"../styled-components/TextArea\"\r\n\r\nconst AddList = (props) => {\r\n    const lists = props.lists;\r\n    const setLists = props.setLists;\r\n\r\n    const [isAddingList, setIsAddingList] = useState(false);\r\n    const textareaRef = useRef();\r\n\r\n    useEffect(() => {\r\n        if (isAddingList)\r\n            textareaRef.current.focus();\r\n    }, [isAddingList])\r\n\r\n    function saveAddList() {\r\n        if (!(textareaRef.current.value === \"\")) {\r\n            let newList = {\r\n                list_title: textareaRef.current.value,\r\n                list_items: []\r\n            };\r\n\r\n            setLists([...lists, newList]);\r\n            setIsAddingList(false);\r\n        }\r\n    }\r\n\r\n    function onkeydownTextArea(e) {\r\n        if (e.keyCode === 13) {\r\n            saveAddList();\r\n            e.preventDefault();\r\n        } else if (e.keyCode === 27) { // Escape key\r\n            setIsAddingList(false);\r\n            e.preventDefault();\r\n        }\r\n    }\r\n\r\n    let addListEditor = () => (\r\n        (<div className=\"add-list-editor\">\r\n            <TextArea\r\n                small\r\n                ref={textareaRef}\r\n                placeholder=\"Enter list title...\"\r\n                onKeyDown={(e) => { onkeydownTextArea(e) }}></TextArea>\r\n            <div className=\"add-list-controls\">\r\n                <Button onClick={saveAddList}>Add Card</Button>\r\n                <ButtonClose onClick={() => {\r\n                    setIsAddingList(false);\r\n                }}>&#10006;</ButtonClose>\r\n            </div>\r\n        </div>)\r\n    )\r\n\r\n    return (\r\n        <StyledAddList>\r\n            <div className={`add-list-wrapper ${!isAddingList ? \"is-idle\" : \"\"}`}\r\n                onClick={() => {\r\n                    if (!isAddingList)\r\n                        setIsAddingList(true);\r\n                }}>\r\n                {isAddingList ?\r\n                    addListEditor()\r\n                    :\r\n                    (<div>+ Add another list</div>)\r\n                }\r\n            </div>\r\n        </StyledAddList>\r\n    )\r\n}\r\n\r\nconst StyledAddList = styled.div`\r\n    .add-list-wrapper {\r\n        background-color: #ebecf0;\r\n        border-radius: 3px;\r\n        padding: 10px 8px;\r\n        width: 272px;\r\n        margin: 0 4px;\r\n        box-sizing: border-box;\r\n        display: inline-block;\r\n        vertical-align: top;\r\n        white-space: nowrap;\r\n        color: #fff;\r\n        \r\n        &.is-idle {\r\n            background-color: hsla(0,0%,100%,.24);\r\n            cursor: pointer;\r\n            \r\n            &:hover {\r\n                background-color: hsla(0,0%,100%,.32);\r\n            }\r\n        }\r\n    }\r\n\r\n    .add-list-controls {\r\n        display: flex;\r\n\r\n        button {\r\n            margin-right: 6px;\r\n        }\r\n    }\r\n\r\n    .add-list-editor {\r\n\r\n        textarea {\r\n            margin-bottom: 8px;\r\n            box-shadow: inset 0 0 0 2px #0079bf;\r\n        }\r\n    }\r\n`\r\n\r\nexport default AddList;","import React, { useState, useEffect, useRef } from 'react';\r\nimport styled from \"styled-components\";\r\nimport CardList from './CardList';\r\nimport AddList from './AddList';\r\n\r\nconst BoardCanvas = () => {\r\n    const [lists, setLists] = useState([]);\r\n\r\n    // componentDidmount, use [] as second argument to prevent looping\r\n    useEffect(() => {\r\n        fetch('/api/lists')\r\n            .then(res => res.json())\r\n            .then(data => {\r\n                setLists(data);\r\n            })\r\n    }, [])\r\n\r\n    // Render multiple lists\r\n    let renderLists = lists.map((list, index) => (\r\n        <CardList\r\n            list_title={list.list_title}\r\n            list_items={list.list_items}\r\n            key={index} />\r\n    ))\r\n\r\n    return (\r\n        <StyledBoardCanvas id=\"board\">\r\n            {renderLists}\r\n            {<AddList \r\n                lists={lists}\r\n                setLists={setLists}/>}\r\n        </StyledBoardCanvas>\r\n    )\r\n}\r\n\r\nconst StyledBoardCanvas = styled.div`\r\n    display: flex;\r\n    user-select: none;\r\n    white-space: nowrap;\r\n    margin-bottom: 8px;\r\n    overflow-x: auto;\r\n    overflow-y: hidden;\r\n    padding: 8px;\r\n    position: absolute;\r\n    bottom: 0;\r\n    left: 0;\r\n    height: calc(100vh - 120px);\r\n    width: calc(100% - 16px);\r\n`\r\n\r\nexport default BoardCanvas;","import React from 'react';\r\nimport './App.css';\r\nimport Header from './components/Header';\r\nimport BoardHeader from './components/BoardHeader';\r\nimport BoardCanvas from './components/BoardCanvas';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Header />\r\n      <BoardHeader />\r\n      <BoardCanvas />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}